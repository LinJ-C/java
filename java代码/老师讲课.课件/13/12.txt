	
基础语法


	1、抽象方法  抽象类   接口



	抽象方法：就是只有壳子的方法。抽象方法要求用abstract修饰;


		  抽象方法 是 用来被   子类重写用的；


		class USB{

			abstract void start(    );

			abstract void stop(   );


		}


		抽象法 主要是在父类 中 定义 接口的标准用的；

	抽象类

		一个类，如果内部有抽象方法，则该类一定是抽象类；


		因为抽象方法不可用，所以，抽象类也不可以用来

		创建对象。

		抽象类必须用abstract修饰；


		抽象不用创建对象，只能用来被继承；


		继承抽象类的类  必须 重写 抽象类中的抽象方法；



	接口

		如果一个类，里边所有的方法都抽象，java将这些

		特殊的类，干脆进行了特殊的规定；


		class   XXX{

			全抽象...;

		}

		则，

		interface XXX{



			全抽象...;

		}

	
	 一个类不可以 extends 继承多个父类，但是可以implements多个接口；


	一个类 implements（实现） 一个接口的含义:

		重写该类所有的抽象方法。
		

		两个说法：

		1、能够弥补一些java舍弃的不足――不能多继承；


		2、将标准的定义能够集中处理。

		

		事件处理机制  就是一套  处理接口；


			


	抽象类和接口的关系 


		接口的一些注意:

			接口中的方法，默认都是public 

			接口中的属性默认都是:


			public static final  


				静态常量；



	2、final修饰符号


		可以修饰类 

			final class XXX{}

			该类不可以被继承,避免版权纠纷。

		可以修饰方法

			final  void fun(){}

			该方法不可以被重写；


		可以属性

			final  int x = 3;

			该属性是常量；


		可以修饰变量

			改变量也是常量；

			

	3、访问权限修饰符(四个  public  protected  没有 private)


		上述四个修饰符号 用来修饰 属性和方法 的访问权限；


不同包下；  public 修饰属性 和方法意味着 该东西运去其它包访问；


不同包下的亲戚：protected 修饰属性 和方法意味着 本包和其它包下的子类

同一个包下；  没有修饰 ,则意味该属性 只能被本包访问；

类中：private   该东西  只能在类内部被访问。

	


	4、类的权限 修饰符号

			public   其它包可以访问本类；

			没有   ：只有本包内部可以访问；
			 
				



		不能一个文件中有两个public 类;


		一个东西可以被访问，首先是所在类被访问；


			然后才是  该属性或者方法是否允许；


	5、内部类 

		
		一个类在另外一个类的内部，则该类是内部类;

	
		class A{



			class B{}

		}

		class B就是内部类；


	为什么要搞内部类？
		
		内部类从语法角度，就是一个普通的方法；

		普通方法怎么着，内部类的语法约束就怎么着；


		
		
		java之所有 允许内部类，就是因为，可以通过内部类
		比较方便的访问外部类的各种属性和方法。

		典型的是：为了方便，牺牲代码可读性。


	
	6、匿名内部类 

			
		class A{

				public void start(){}

		}
		上面为基础


		new A(){ 

			 public void start(){}
 public void start(){}

 public void start(){}

 public void start(){}

 public void start(){}



  		}.start(); 

			
		上面一堆 就是  匿名内部类的具体应用；


		1、首先开发一个类，该类没有名字，该类继承了class A

		2、该类重写了 class A{}的start()方法;

		3、用没有名字的类，创建一个没有名字的对象，

		4、调用该对象的start();


	

		通过事件处理的匿名内部类的使用，我们发现，

		对于一些一次性使用的子类，可以考虑用

		匿名内部类的方式 简化步骤；


		本质，是牺牲  可读性。	

		

	7、多线程 

		

		java中如何开发多线程

			
		为什么要多线程？

			因为软件有时候 需要并列作事 ；


			

		java如何实现多线程,

		开发两个并列执行的线程;

			
		方法1：

		1、开发两个类，这两个类都extends Thread 类；

		2、这两个类都重写   public void run(){}方法；


		3、将自己 需要并列执行的两段代码 放置在两个

			run()方法；


		4、上述这个类其实就是两个线程类，用两个线程

			类创建两个线程对象；

		5、启动两个线程对象

			线程名.start();


	方法2:

			
	1、开发两个类，这两个类都implements Runnable 接口；

	2、在这两类重，重写public void run(){}

	3、将自己的代码  放进去；

	4、此时，上述两个类 就是两个线程资源类，使用上述两个类
	    创建两个对象；  

			a    b  

	5、使用Thread类 来创建 两个线程对象，在创建对象的同时

		将a、b资源传递进来:

			Thread  t1 = new Thread(a);

			Thread  t2 = new Thread(b);


	6、启动两个线程对象 ；


				t1.start();

				t2.start();



					





8\、异常处理 (机制)  事件处理机制



try{}
catch(){}







	






