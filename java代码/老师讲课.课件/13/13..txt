	IO包 的应用开发

1、IO概述

	Input  Output ，就是关于  程序  数据的输入 和输出的 各种处理类；

	为了处理方便，java将各种常见的 io相关的功能提供 相关的类，将

	相关的类打包就是io.*包，

	关于IO就是io包中类的学习；

	
2、类的学习秘诀

	构造函数；    决定了如何new 


	常用关键方法；决定了如何使用；


3、IO包中第一类  File类

	
		第一名重要的类String类
		第二名重要的类File类


		构造一个文件

		File  file = new File(路径);

		

		文件的概述:

			java中，将文件和文件夹多作为File 对象来处理，甚至

			盘也作为File对象来处理；

			文件  和  文件对象  要区分：


			文件指  硬盘上 躺着 的  物理块；

			所谓的文件对象时  File的对象，在内存中；

		                我们需要通过 new 将 文件对象和物理文件建立关联，

			通过调用文件对象的各种方法，来处理物理文件。


	各种常见方法

		
	f.createNewFile();//创建物理文件；
	f.mkdir();//     创建文件夹，只创建最后一级目录，如果上级不存在，不创建；
	f.mkdirs()//  创建文件夹，如果上级 不存在，一并创建；

	f.isFile();//判断  该f对应的  是否为 文件；

	f.isDirectory();//判断该f对应的 是否为 文件夹；

	f.delete();//删除该f对应的  文件或者文件夹，注意，如果删除文件夹，则只能删		除最后一级且文件夹为空；

	f.listFiles()//   列出该文件夹下的所有文件对象；

	f.list()// 列出该文件夹下所有对象的名字；

	f.isAbsolute();   //判断该 f对应的是否为决定地址；

			什么是绝对路径，什么相对路径？

			绝对  跟  程序的执行位置无关；

			相对:相对程序的执行位置；

	f.getName()//得到文件的名字；

	f.getAbsolutePath()//得到文件的绝对路径+名字；

	f.exists()//   判断 文件是否存在

	f.length()//得到文件的长度；  注意：是long类型；

	f.isHidden()//判断文件是否为 隐藏文件；

	f.lastModified();//虽然很重要，但是不常用，得到文件的最后修改时间；

		          1970  ===>最后修改时间的  时间差 的  毫秒数

	f.setLastModied(long x)  修改最后修改时间；

	f.canXXX()//判断  是否为  可读、可写 、可执行

	f.setXXX()//用来修改   读  写   可执行

	File.listRoots();//列出 本地硬盘的盘符




	 文件 的主要作用是：  对文件的各种外围属性 进行操作，不 涉及文件的内容；

4、硬盘扫描


	
		作业：

			编写一个  递归 删除的 程序；

			判断 一个文件夹 ，

			找到该文件夹下所有的 文件夹

			判断该文件夹 是否为空，

			不为空 ，列出所有的 内容；

			删除文件；

			如果文件夹，继续递归删除，


				
 

4、RandomAccessFile 类

		随机访问文件类

		与File类操作 文件的属性不同，该类主要功能是操作文件的内容；


				
		RandomAccessFile  ra = new RandomAccessFile(文件对象，"操作模式");


		
		File  f =new File("d:\\333.txt");


		RandomAccessFile  ra = new RandomAccessFile(f，"rw");


		//8大常用方法

		3个读的方法；

			read();//读取一个字节；

			read(byte[] bb);//一框读

			read(byte[] bb,int start,int length)// 半框 读

		3个 写数据的方法

			write(byte b )//写一个字节；

			write(byte[] bb)//写一筐字节；

			write(byte[] bb ,int start,int length);//写半框


			getBytes();

		2个跳的方法

			seek(n);  // 从头跳，绝对跳；

			skipBytes(n)//从当前位置跳；



5、读写案例

			165041102
			张伟
			男
			河北

			
	
			165041103
			王伟
			 女
			河南

			165041103
			赵伟
			男
			湖北


		测试读写的效率

		

		两个打时间戳的方法：

				long start = System.currentTimeMillis() ;
	
	
					程序
	
				long end= System.currentTimeMillis() ;


				System.out.println(end-start);




	读写效率 与  读写 单位  之间的  关系  是正相关 ，注意：框的大小不要超过

		64k, 超过64k则，读的性能会下降；




























