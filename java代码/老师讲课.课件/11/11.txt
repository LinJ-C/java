事件处理

1、GUI 的扩展


	图形界面负责完成程序的  界面部分；

	如果让程序能够按照用户的动作来驱动，

	需要添加  事件处理功能。


	传统的命令行程序的使用体验是：  软件驱动用户，用户很被动；


	GUI类型的程序是:            用户驱动软件；

	

	事件处理的本质 就是一套   别人已经设计好的    代码调用机制；



2、  事件处理机制


	java的事件处理机制 比较简单  


		就是组件     动作      对象   建立关联


		实现     用户动作 对  代码的 驱动(调用);



		事件的本质  就是  

在特定的组件上   注册   某一个动作的   某一个类处理对象。




3、组件介绍

		
		窗口 Frame

		文本框 TextField

		按钮   Button

		下拉菜单  Choice

		菜单    MenuBar  Menu  MenuItem

		单选框   Checkbox+CheckboxGroup

		复选框    Checkbox

		。。。。




		
4、  常见事件类型

	
都是 java设计好的：


动作事件;   ActionEvent	（按钮上单击，文本框中回车，选中菜单项）

键盘事件:    KeyEvent   按下  松开  单击 

鼠标事件:     MouseEvent  按下   松开  单击  进来  移出

鼠标移动事件:     MouseMotionEvent  移动   拖动 

窗口事件:    WindowEvent   窗口被激活  

			   窗口被关闭后

			     窗口被关闭中

			   窗口最大化

			窗口最小化 

			窗口被钝化

			 窗口被打开


	

	
3、处理对象 

		
		如何编写自己的处理对象

		
		步骤如下:

	1、开发一个类，该类需要implements 该类对应的接口

	2、重写接口所有的方法 


	3、将自己的处理代码  放置到  对应的 处理方法中；

	4、用该类创建一个对象，该对象就是  处理对象；

4、处理接口
	
	

	
	ActionEvent  ====〉ActionListener
	

	 KeyEvent    ===>KeyListener		

 	MouseEvent   ===>MouseListener

 	MouseMotionEvent  ===>MouseMotionListener

	WindowEvent      ===>WindowListener


5、  举例

			


	。。。。




6、总结  事件处理的步骤

		
		在编写好界面的情况下，开始添加事件处理功能，遵循

		如下步骤


		1、确定事件源

		2、确定事件类型；

		
		3、 开发自己的 事件处理类 ===〉步骤如3 

		4、用上面的类  创建一个对象 

		5、在事件源上将  事件源  事件类型  处理对象 

		     连接起来(注册)



		
		note:

			一个事件处理对象可以 连接多个事件源；

			一个事件源上 也可以连接 多个处理对象；

			

7、各种案例

	案例1：关闭窗口

	案例2: aswd 键的控制

	案例3： 让我们的计算机活起来

			

			
		
         








	


