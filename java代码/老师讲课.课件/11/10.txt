	面向对象的三大特性


1、封装 

	基于对象 的语言 很多  ；

	面向对象  ；   c++   java   c#  python


	java的封装 两层含义

		含义1:所有的代码都 封装在类中；

		含义2：可以通过修饰符号+方法来保护我们的属性;



	class SateLite {

		private int  height;

		int speed;

		String id;

		String name;

		

		void addSpeed(int v){}

		void divdSpeed(int v){}

		....



	}	



	SateLite  dongfanghong = new SateLite();


		dongfanghong.height = 450;

		
			

			

			

	private 修饰符号可以保护属性，对于被保护的属性，

	都要提供set/get 方法来提供安全访问；


	建议：对于所有的属性，都提供set/get方法；


		无需担心，用eclipse 开发，一键生成，无需编写;
	




2、继承



			class Mary{

				int height;

				Color clothes;

				void walk(Direct dir);

				void jump(int v);

				void run(int v);

				void fire();

	



			}


			class Mary2  extends Mary{



				Instrument ins;


				Friends  friends;


			

				void drive();

			        void fly();


				void ...

				...



			}

	
	在Java中，一个类可以继承另外一个类，

	被继承的类叫做 父类， 继承别人的类叫做子类；

	表达上如下

			class B  extends A{}

	B是子类 A是父类；


		1、通过继承，可以简化子类代码的编写；


		2、子类之继承父类的属性和方法，并不继承构造函数；


		3、java的类可以允许多层继承；

				 C====〉B====>A。。。。

		4、Java的类继承不允许多继承；

			就是一个类只允许有一个父类；

		
			
				

			class Tank{}

			class Boat{}


			class TB  exends Tank ,Boat{


			}

			java 不允许  C++允许 带来的问题是

					类的功能大爆炸 ；

		5、在一个子类的构造函数中


				默认调用父类的构造；（在第一行)

			


		6、一个类，如果没有继承，则继承于Object类；


			所以：Object类是所有类的根；
		


	Object类是所有类的根，  为了给所有的类提供一个共用的方法




		7、在子类中，允许有和父类完全相同的属性和方法。

			
			那么，如果在子类中，需要访问，重名的属性和方法，则:

			super.属性；
			super.方法（）；  this

			访问的即父类对应的属性和方法；


		8、那么如果子类的方法与父类的方法 相同，

			则叫做 方法的重写；===〉为了覆盖；


			方法的重载；===〉为了方便；
			

方法的重写 一定要注意，面向对象所有的神奇都是从重写开始的；



3、多态 


		一个方法有对象名参数，给它传递不同的对象，

		则能够调用到不同的方法，从而呈现不同的运行状态

		，这就是多态。

		class MainBoard{


		pubic void start( USB   u  ){


				
				u.start();
			
		
		}


		}

		通过上面的案例，我们明白，

		多态用 父类 为对象起名字  ，传递给该名字

		子类对象，调用的时候，就调用不同的子类对象方法；


		多态要成立：必须有 继承  和  重写；
		


		多态的好处：  可以在原程序没有任何变化的情况下，
			    扩展 功能；


	
		多态分两种情况，运行时多态；和编译时多态；



		编译的时候，看父类；
		运行的时候看子类；


		运行的时候,如果调用的是属性，则调用父类属性；l
		如果调用的是方法，则调用子类方法；
		多态是各类高级面试的一个 必考内容；

		
		坏处:

			多态就是通过父类的名字 访问子类的功能，


			但是，父类的名字只能访问 子类的重写功能


			子类的新功能，父类的名字是调用不到的；

			
		多态是以屏蔽  子类新功能为代价完成软件扩展的，

		非必须，不使用；


			


		
			













